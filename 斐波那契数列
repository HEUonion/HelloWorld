long long Fibonacci(unsigned int){
    if(n<=0);
    returen 0;
    
    if(n==1)
    return 1;
    
    return Fibonacci(n-1) + Fibonacci(n-2);
} //递归的解法

int Fibonacci(int n) {
        int result[2]={0,1};
        if(n<2){
            return result[n];
        }
        
        long fibNumber1 = 1;
        long fibNumber2 = 0;
        long fibN = 0;
        for(int i=2;i<=n;i++){
            fibN = fibNumber1 + fibNumber2;
            fibNumber2 = fibNumber1;
            fibNumber1 = fibN;
        }
        return fibN;
    } // 循环的解法
    
    int jumpFloor(int number) {
        long floor[2] = {1, 2};
        long f = 0;
        if(number<=2 && number >=0){
            return floor[number-1];
        }
        long f1 = 2;
        long f2 = 1;
        for(int i=2;i<number;i++){
            f = f1 + f2;
            f2 = f1;
            f1 = f;
        }
        return f;
    } //青蛙跳台阶问题
    
        int jumpFloorII(int number) {
        if(number<0){
            return -1;
        }
        
        int floor = 1;
        if(number<=1)
            return floor;
        for(int i=1;i<number;i++){
            floor = 2 * floor;
        }
        return floor;
    }//变态跳台阶
